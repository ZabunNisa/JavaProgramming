
		Java Day39
        Topics: Recap:
        			OOP Encapsulation
        			OOP Inheritance

        package name: day39_Recap


        Method Overriding: giving different implementations to the method

        					MUST happen in the child class

        					return-type, method name, parameter MUST be same

        					Access modifier need to be same or more visible
        								public > protected > default

        					Method we can not override: private, static, final

        					ONLY the instance methods (not final & not private) can be overriden

        					@Overriden annotation must be applicable




        next Thursday:
        	protected access modifier
        	final keyword

        next Friday:
        	Exceptions & Exception handlings

        -------------------------------------


        Shape:
        	variables:
        			name

        	Encapsulate the field

        	Add a constructor to set the filed

        	Methods:
        		area(){}
        		perimeter(){}



        Square extends Shape:
        	variables:
        		side;

        	Encapsulate the field

        	Add a constructor to set the filed

        	area(): side * side
        	perimeter(): side * 4
        	toString(): side, area, perimeter


        Rectangle extends Shape:
        	variables:
        		length
        		width

        	Encapsulate the fields

        	Add a constructor to set the filed

        	area(): length * width
        	perimeter(): 2 * ( width + length)
        	toString(): length, width, area, perimeter


        Circle extends Shape:
        		variables:
        			radius
        			pi (static)

        		Encapsulate the field

        		Add a constructor to set the filed

        		area(): radius * radius * pi
        		perimeter(): 2 * radius * pi
        		toString(): r, pi, area, perimeter




        OOP:
        	Encapsulation
        	Inheritance

        	Abstraction
        	Polymorphism




